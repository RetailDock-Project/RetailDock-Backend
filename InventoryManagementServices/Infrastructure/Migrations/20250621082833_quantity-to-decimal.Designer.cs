// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250621082833_quantity-to-decimal")]
    partial class quantitytodecimal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.CashCustomers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<Guid>("LedgerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("CashCustomers");
                });

            modelBuilder.Entity("Domain.Entities.CreditCustomers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("GstNumber")
                        .HasColumnType("longtext");

                    b.Property<Guid>("LedgerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CreditCustomers");
                });

            modelBuilder.Entity("Domain.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("DocumentData")
                        .IsRequired()
                        .HasColumnType("MEDIUMBLOB");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FileNote")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Domain.Entities.HsnCode", b =>
                {
                    b.Property<int>("HsnCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("HsnCodeId"));

                    b.Property<decimal>("GstRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("HSNCodeNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("OrgnaisationId")
                        .HasColumnType("char(36)");

                    b.HasKey("HsnCodeId");

                    b.ToTable("HsnCodes");
                });

            modelBuilder.Entity("Domain.Entities.Images", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("MEDIUMBLOB");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("BarCodeImageBase64")
                        .IsRequired()
                        .HasColumnType("MEDIUMBLOB");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("HsnCodeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastStockUpdate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("MRP")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("OrgnaisationId")
                        .HasColumnType("char(36)");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ReOrderLevel")
                        .HasColumnType("int");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Stock")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("UnitOfMeasuresId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("HsnCodeId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("UnitOfMeasuresId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Domain.Entities.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductCategoryId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("OrgnaisationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ProductCategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ProductCategoryId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Domain.Entities.Purchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PurchaseInvoiceId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PurchaseOrderId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Purchasedate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("char(36)");

                    b.Property<string>("SupplierInvoiceNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseInvoiceId")
                        .IsUnique();

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal?>("CGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GstType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal?>("IGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Narration")
                        .HasColumnType("longtext");

                    b.Property<string>("PaymentMode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal?>("SGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("UGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("PurchaseInvoices");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal?>("CGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateOnly?>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("IGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PurchaseId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("RatePerPiece")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("SGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("UGST")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchaseItems");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseOrder", b =>
                {
                    b.Property<Guid>("PurchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("GrossTotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PurchaseOrderNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("char(36)");

                    b.HasKey("PurchaseOrderId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseOrderItem", b =>
                {
                    b.Property<Guid>("PurchaseOrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PurchaseOrderId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("RatePerPiece")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("PurchaseOrderItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrdersItem");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseReturn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("OriginalPurchaseId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PurchaseReturnInvoiceId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("ReturnDate")
                        .HasColumnType("date");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("OriginalPurchaseId");

                    b.HasIndex("PurchaseReturnInvoiceId")
                        .IsUnique();

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseReturns");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseReturnInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal?>("CGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("GstType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal?>("IGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Narration")
                        .HasColumnType("longtext");

                    b.Property<Guid>("OriginalPurchaseInvoiceId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("SGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("UGST")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("OriginalPurchaseInvoiceId");

                    b.ToTable("PurchaseReturnInvoices");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseReturnItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal?>("CGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("IGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid>("OriginalPurchaseItemId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PurchaseReturnId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("ReturnedQuantity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("SGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("UGST")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("OriginalPurchaseItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseReturnId");

                    b.ToTable("PurchaseReturnItems");
                });

            modelBuilder.Entity("Domain.Entities.SaleItems", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("CGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("HSNCodeNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("IGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("SGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TaxableAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("UGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("SaleId");

                    b.HasIndex("UnitId");

                    b.ToTable("SaleItems");
                });

            modelBuilder.Entity("Domain.Entities.Sales", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CashCustomerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DebtorsId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GST_Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Narration")
                        .HasColumnType("longtext");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SalesType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("TotalUnitCost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CashCustomerId");

                    b.HasIndex("DebtorsId");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Domain.Entities.SalesInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("B2BInvoiceNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("B2CInvoiceNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("TaxableAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalCGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalIGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalSGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalUGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("SalesInvoices");
                });

            modelBuilder.Entity("Domain.Entities.SalesReturn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ReturnInvoiceId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("TotalUnitCost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ReturnInvoiceId")
                        .IsUnique();

                    b.HasIndex("SaleId")
                        .IsUnique();

                    b.ToTable("SalesReturn");
                });

            modelBuilder.Entity("Domain.Entities.SalesReturnInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("B2BReturnInvoiceNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("B2CReturnInvoiceNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PaymentMode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("TaxableAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalCGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalIGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalSGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalUGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("SalesReturnInvoice");
                });

            modelBuilder.Entity("Domain.Entities.SalesReturnItems", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("CGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("HSNCodeNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("IGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid>("ReturnId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("SGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TaxableAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("UGST")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.HasIndex("ReturnId");

                    b.HasIndex("UnitId");

                    b.ToTable("SalesReturnItems");
                });

            modelBuilder.Entity("Domain.Entities.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("BankName")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("ContactName")
                        .HasColumnType("longtext");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("GSTNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("IFSCCode")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("LedgerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Pincode")
                        .HasColumnType("longtext");

                    b.Property<string>("State")
                        .HasColumnType("longtext");

                    b.Property<string>("UPIId")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Domain.Entities.UnitOfMeasures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Measurement")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("OrgnaisationId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("UnitOfMeasures");
                });

            modelBuilder.Entity("Domain.Entities.Images", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.HasOne("Domain.Entities.HsnCode", "HsnCode")
                        .WithMany("Products")
                        .HasForeignKey("HsnCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UnitOfMeasures", "UnitOfMeasures")
                        .WithMany("Products")
                        .HasForeignKey("UnitOfMeasuresId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("HsnCode");

                    b.Navigation("UnitOfMeasures");
                });

            modelBuilder.Entity("Domain.Entities.Purchase", b =>
                {
                    b.HasOne("Domain.Entities.PurchaseInvoice", "PurchaseInvoice")
                        .WithOne("Purchase")
                        .HasForeignKey("Domain.Entities.Purchase", "PurchaseInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Purchases")
                        .HasForeignKey("PurchaseOrderId");

                    b.HasOne("Domain.Entities.Supplier", "Supplier")
                        .WithMany("Purchases")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PurchaseInvoice");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseItem", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Purchase", "Purchase")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("Domain.Entities.Supplier", "Supplier")
                        .WithMany("PurchasesOrder")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseOrderItem", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseReturn", b =>
                {
                    b.HasOne("Domain.Entities.Purchase", "Purchase")
                        .WithMany("PurchaseReturns")
                        .HasForeignKey("OriginalPurchaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PurchaseReturnInvoice", "PurchaseReturnInvoice")
                        .WithOne("PurchaseReturn")
                        .HasForeignKey("Domain.Entities.PurchaseReturn", "PurchaseReturnInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Supplier", "Supplier")
                        .WithMany("PurchaseReturns")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase");

                    b.Navigation("PurchaseReturnInvoice");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseReturnInvoice", b =>
                {
                    b.HasOne("Domain.Entities.PurchaseInvoice", "PurchaseInvoice")
                        .WithMany("PurchaseReturnInvoices")
                        .HasForeignKey("OriginalPurchaseInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PurchaseInvoice");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseReturnItem", b =>
                {
                    b.HasOne("Domain.Entities.PurchaseItem", "PurchaseItem")
                        .WithMany()
                        .HasForeignKey("OriginalPurchaseItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("PurchaseReturnItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PurchaseReturn", "PurchaseReturn")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseReturnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseItem");

                    b.Navigation("PurchaseReturn");
                });

            modelBuilder.Entity("Domain.Entities.SaleItems", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithOne("SaleItems")
                        .HasForeignKey("Domain.Entities.SaleItems", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Sales", "Sales")
                        .WithMany("SaleItems")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UnitOfMeasures", "UnitOfMeasures")
                        .WithMany("SaleItems")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sales");

                    b.Navigation("UnitOfMeasures");
                });

            modelBuilder.Entity("Domain.Entities.Sales", b =>
                {
                    b.HasOne("Domain.Entities.CashCustomers", "CashCustomers")
                        .WithMany("Sales")
                        .HasForeignKey("CashCustomerId");

                    b.HasOne("Domain.Entities.CreditCustomers", "CreditCustomers")
                        .WithMany("Sales")
                        .HasForeignKey("DebtorsId");

                    b.HasOne("Domain.Entities.SalesInvoice", "Invoices")
                        .WithOne("Sales")
                        .HasForeignKey("Domain.Entities.Sales", "InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CashCustomers");

                    b.Navigation("CreditCustomers");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Domain.Entities.SalesReturn", b =>
                {
                    b.HasOne("Domain.Entities.SalesReturnInvoice", "ReturnInvoice")
                        .WithOne("SalesReturn")
                        .HasForeignKey("Domain.Entities.SalesReturn", "ReturnInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Sales", "Sales")
                        .WithOne("SalesReturn")
                        .HasForeignKey("Domain.Entities.SalesReturn", "SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReturnInvoice");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Domain.Entities.SalesReturnItems", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Products")
                        .WithOne("SalesReturnItems")
                        .HasForeignKey("Domain.Entities.SalesReturnItems", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SalesReturn", "SalesReturn")
                        .WithMany("SalesReturnItems")
                        .HasForeignKey("ReturnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UnitOfMeasures", "UnitOfMeasures")
                        .WithMany("SalesReturnItems")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Products");

                    b.Navigation("SalesReturn");

                    b.Navigation("UnitOfMeasures");
                });

            modelBuilder.Entity("Domain.Entities.CashCustomers", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Domain.Entities.CreditCustomers", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Domain.Entities.HsnCode", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("PurchaseItems");

                    b.Navigation("PurchaseOrderItems");

                    b.Navigation("PurchaseReturnItems");

                    b.Navigation("SaleItems")
                        .IsRequired();

                    b.Navigation("SalesReturnItems")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Purchase", b =>
                {
                    b.Navigation("PurchaseItems");

                    b.Navigation("PurchaseReturns");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseInvoice", b =>
                {
                    b.Navigation("Purchase")
                        .IsRequired();

                    b.Navigation("PurchaseReturnInvoices");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseOrderItems");

                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseReturn", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseReturnInvoice", b =>
                {
                    b.Navigation("PurchaseReturn")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Sales", b =>
                {
                    b.Navigation("SaleItems");

                    b.Navigation("SalesReturn")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.SalesInvoice", b =>
                {
                    b.Navigation("Sales")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.SalesReturn", b =>
                {
                    b.Navigation("SalesReturnItems");
                });

            modelBuilder.Entity("Domain.Entities.SalesReturnInvoice", b =>
                {
                    b.Navigation("SalesReturn")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Supplier", b =>
                {
                    b.Navigation("PurchaseReturns");

                    b.Navigation("Purchases");

                    b.Navigation("PurchasesOrder");
                });

            modelBuilder.Entity("Domain.Entities.UnitOfMeasures", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SaleItems");

                    b.Navigation("SalesReturnItems");
                });
#pragma warning restore 612, 618
        }
    }
}
